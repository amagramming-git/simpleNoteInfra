AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS-React"

Parameters:
  DatabaseHost:
    Type: "String"
  Dns:
    Type: "String"

Mappings:
  LocalValueMap:
    LocalValues:
      Cpu: "256"
      Memory: "512"
      EphemeralStorageSizeInGiB: 25

Resources:
  DjangoLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/logs/simplenote/django

  DjangoTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: django-container
          Image: !ImportValue DjangoEcrRepositoryUri
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DjangoLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: django
          PortMappings:
            - Protocol: tcp
              ContainerPort: 8000
          Command:
            ["python3", "manage.py", "runserver", "0.0.0.0:8000", "--insecure"]
          Environment:
            - Name: DEBUG
              Value: "0"
            - Name: DATABASE_ENGINE
              Value: "django.db.backends.mysql"
            - Name: DATABASE_DB
              Value: "djangodb"
            - Name: DATABASE_USER
              Value: "django"
            - Name: DATABASE_HOST
              Value: !Ref DatabaseHost
            - Name: DATABASE_PORT
              Value: "3306"
            - Name: CORS_ORIGIN_WHITELIST_ELEMENT
              Value: !Sub
                - "https://${Dns}"
                - Dns: !Ref Dns
          Secrets:
            - Name: SECRET_KEY
              ValueFrom: !ImportValue SecretDjangoSecretKeyArn
            - Name: DATABASE_PASSWORD
              ValueFrom: !ImportValue SecretDjangoDatabasePasswordArn
      Cpu: !FindInMap [LocalValueMap, LocalValues, Cpu]
      EphemeralStorage:
        SizeInGiB:
          !FindInMap [LocalValueMap, LocalValues, EphemeralStorageSizeInGiB]
      ExecutionRoleArn: !ImportValue EcsTaskExecutionRoleArn
      Family: django
      Memory: !FindInMap [LocalValueMap, LocalValues, Memory]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

  DjangoTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue VpcId
      Name: "DjangoTargetGroup"
      Protocol: HTTP
      Port: 8000
      TargetType: ip

  DjangoListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DjangoTargetGroup
      Priority: 1
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/admin/*"
              - "/api/*"
      ListenerArn: !ImportValue AlbListenerArn

  DjangoEcsService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue EcsClusterName
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 0
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref DjangoTargetGroup
          ContainerPort: 8000
          ContainerName: django-container
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue DjangoSecurityGroupId
          Subnets:
            - !ImportValue "Subnet3Id"
            - !ImportValue "Subnet7Id"
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      ServiceName: django-service
      TaskDefinition: !Ref DjangoTaskDefinition

Outputs:
  DjangoTaskDefinitionArn:
    Value: !Ref "DjangoTaskDefinition"
    Export:
      Name: "DjangoTaskDefinitionArn"
  DjangoEcsServiceName:
    Value: !GetAtt "DjangoEcsService.Name"
    Export:
      Name: "DjangoEcsServiceName"
